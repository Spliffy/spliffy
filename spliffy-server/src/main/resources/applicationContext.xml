<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="locations" >
			<list>
                <!-- Default properties, should run out of the box -->
				<value>classpath:spliffy-default.properties</value>
				
                <!-- This refers to an optional file which should be outside the WAR (ie in tomcat/shared/classes -->
                <!-- It contains environment specific configuration, such as database connection information -->
				<value>classpath:spliffy-env.properties</value>				
			</list>
		</property>
	</bean>

    <import resource="classpath:database.xml"/>
    
    <!-- Another environment specific file. Default empty file is included, but create your own outside the WAR to 
    environment specific bean declarations
    -->
    <import resource="classpath:env.xml"/>

    <bean id="lock.manager" class="com.ettrema.http.fs.SimpleLockManager" />
    
    <bean id="local.volume.type" class="org.spliffy.server.db.store.LocalVolumeInstanceType">
        <constructor-arg value="local" />
        <constructor-arg ref="sessionFactory"/>
        <constructor-arg>
            <!-- we have 2 stores for representing redundancy operation. These will be autoloaded into database (autoloading is not intended for production) -->
            <list>
                <value>target/blobs/store1</value>
                <value>target/blobs/store2</value>
            </list>
        </constructor-arg>
    </bean>
    
    
    <bean id="volume.allocator" class="org.spliffy.server.db.store.SingleVolumeInstanceAllocator"/>
        
    <bean id="blob.store" class="org.spliffy.server.db.store.FileSystemBlobStore">
        <constructor-arg value="${blob.storage.location}" />
    </bean>
    
    <!-- This is a much more robust blob store, but experimental -->
    <!--
    <bean id="blob.store" class="org.spliffy.server.db.store.HAVolumeBlobStore">
        <constructor-arg ref="volume.allocator"/>
        <constructor-arg>
            <list>
                <ref local="local.volume.type" />
            </list>
        </constructor-arg>
        <constructor-arg ref="session.manager" />
    </bean>
    -->

    <bean id="hash.store" class="org.spliffy.server.db.store.SpliffyHashStore"/>
    
    <bean id="mail.sender" class="com.ettrema.mail.send.RemoteSmtpMailSender" init-method="start">
        <constructor-arg value="${mail.smtp.host}"/>
        <constructor-arg value="${mail.smtp.user}"/>
        <constructor-arg value="${mail.smtp.password}"/>
        <constructor-arg value="${mail.smtp.port}"/>
    </bean>

    <!--
    <bean id="mail.sender.mock" class="com.ettrema.mail.send.MockMailSender"></bean>
    -->
    <!--
    <bean id="mail.sender.aspirin" class="com.ettrema.mail.send.AspirinMailSender"></bean>
    -->
    
    
    <bean id="password.manager" class="org.spliffy.server.web.PasswordManager"/>

    <bean id="dao.user" class="org.spliffy.server.db.utils.UserDao"  >

    </bean>

    <bean id="security.manager" class="org.spliffy.server.web.SpliffySecurityManager">
        <constructor-arg ref="dao.user" />
        <constructor-arg ref="password.manager" />
    </bean>
    
    <bean id="resource.manager" class="org.spliffy.server.manager.ResourceManager"></bean>
    
    <bean id="share.manager" class="org.spliffy.server.manager.ShareManager">
        <constructor-arg ref="resource.manager" />
        <constructor-arg ref="mail.sender" />
    </bean>    
    <bean id="services" class="org.spliffy.server.web.Services">
        <constructor-arg ref="hash.store"/>
        <constructor-arg ref="blob.store"/>
        <constructor-arg ref="templater"/>
        <constructor-arg ref="security.manager"/>
        <constructor-arg ref="share.manager"/>
        <constructor-arg ref="resource.manager"/>
    </bean>    
            
    <!-- default config is to load templates from WEB-INF/templates -->
    <bean id="templater" class="org.spliffy.server.web.templating.FreemarkerTemplater">
        <constructor-arg ref="application.manager" />
    </bean>
    
    <bean id="event.manager" class="com.ettrema.event.EventManagerImpl"/>
    
    <bean id="application.manager" class="org.spliffy.server.apps.ApplicationManager">
        <constructor-arg>
            <list>
                <bean class="org.spliffy.server.apps.admin.dashboard.DashboardAdminApp"/>
                <bean class="org.spliffy.server.apps.admin.users.UserAdminApp"/>
                <bean class="org.spliffy.server.apps.admin.websites.WebsiteAdminApp"/>
                <bean class="org.spliffy.server.apps.login.LoginApp"/>
                <bean class="org.spliffy.server.apps.calendar.CalendarApp"/>
                <bean class="org.spliffy.server.apps.contacts.ContactsApp"/>
                <bean class="org.spliffy.server.apps.sharing.ShareApp"/>
                <bean class="org.spliffy.server.apps.signup.SignupApp"/>                
            </list>
        </constructor-arg>
        <property name="appsConfigDir" value="${apps.config.dir}" />
    </bean>
    
    <bean id="resource.type.helper.default" class="com.bradmcevoy.http.webdav.WebDavResourceTypeHelper"/>

    <bean id="resource.type.helper.acl" class="com.ettrema.http.acl.AccessControlledResourceTypeHelper">
        <constructor-arg ref="resource.type.helper.default"/>
    </bean>

    <bean id="resource.type.helper.caldav" class="com.ettrema.http.caldav.CalendarResourceTypeHelper">
        <constructor-arg ref="resource.type.helper.acl"/>
    </bean>        

    <bean id="resource.type.helper.carddav" class="com.ettrema.http.carddav.AddressBookResourceTypeHelper">
        <constructor-arg ref="resource.type.helper.caldav"/>
    </bean>    
    
    <bean id="auth.service" class="com.bradmcevoy.http.AuthenticationService">
        <property name="disableDigest" value="false" />
    </bean>

    <bean id="milton.response.handler" class="com.bradmcevoy.http.webdav.DefaultWebDavResponseHandler">
        <constructor-arg ref="auth.service"/>
        <constructor-arg ref="resource.type.helper.carddav"/>
    </bean>    
    
    <!-- The compressing response handler wraps the default response handler and compresses
    response content. This will only actually perform compression for specific mime types
    (currently hard coded to text, css and js files) and if the client supports gzip -->
    <bean id="milton.response.handler.compressing" class="com.bradmcevoy.http.CompressingResponseHandler">
        <constructor-arg ref="milton.response.handler" />
    </bean>

    <bean id="milton.handler.helper" class="com.bradmcevoy.http.HandlerHelper">
        <constructor-arg ref="auth.service"/>
        <constructor-arg>
            <list>
            </list>
        </constructor-arg>
    </bean>

    <bean id="protocol.http11" class="com.bradmcevoy.http.http11.Http11Protocol">
        <constructor-arg ref="milton.response.handler"/>
        <constructor-arg ref="milton.handler.helper"/>
    </bean>

    <bean id="protocol.webdav" class="com.bradmcevoy.http.webdav.WebDavProtocol">
        <constructor-arg ref="milton.response.handler"/>
        <constructor-arg ref="milton.handler.helper"/>
        <constructor-arg ref="resource.type.helper.carddav"/>
        <constructor-arg ref="milton.property.sources"/>
    </bean>

    <bean id="protocol.caldav" class="com.ettrema.http.caldav.CalDavProtocol">
        <constructor-arg ref="main.spliffy.resource.factory" />
        <constructor-arg ref="milton.response.handler"/>
        <constructor-arg ref="milton.handler.helper"/>
        <constructor-arg ref="protocol.webdav"/>
    </bean>

    <bean id="protocol.carddav" class="com.ettrema.http.carddav.CardDavProtocol">
        <constructor-arg ref="main.spliffy.resource.factory" />
        <constructor-arg ref="milton.response.handler"/>
        <constructor-arg ref="milton.handler.helper"/>
        <constructor-arg ref="protocol.webdav"/>
    </bean>

    <bean id="protocol.acl" class="com.ettrema.http.acl.ACLProtocol">
        <constructor-arg ref="protocol.webdav"/>
    </bean>

    <bean id="protocol.handlers" class="com.bradmcevoy.http.ProtocolHandlers">
        <constructor-arg>
            <list>
                <ref bean="protocol.http11"/>
                <ref bean="protocol.webdav"/>
                <ref bean="protocol.caldav"/>
                <ref bean="protocol.acl"/>
                <ref bean="protocol.carddav"/>				
            </list>
        </constructor-arg>
    </bean>

    <!-- property sources defined explicitly so we can inject quota manager-->
    <bean id="milton.property.sources" class="com.bradmcevoy.http.webdav.PropertySourcesList">
        <constructor-arg ref="resource.type.helper.carddav"/>
    </bean>

    <bean id="milton.prop.patcher" class="com.bradmcevoy.http.webdav.PropertySourcePatchSetter">
        <constructor-arg ref="milton.property.sources"/>
    </bean>

    <bean id="permissions.authoriser" class="com.bradmcevoy.property.DefaultPropertyAuthoriser"/>
    

    <bean id="main.spliffy.resource.factory" class="org.spliffy.server.web.SpliffyResourceFactory" init-method="start" destroy-method="stop">
        <!--        
        <constructor-arg ref="lock.manager"/>
        -->
        <constructor-arg ref="session.manager"/>
        <constructor-arg ref="dao.user"/>
        <constructor-arg ref="security.manager"/>
        <constructor-arg ref="services"/>
        <constructor-arg ref="application.manager"/>        
        <constructor-arg ref="event.manager"/> 
        <constructor-arg ref="milton.property.sources" />
    </bean>
    
    <!-- This RF acts as a pass-through wrapper. If it doesnt handler the url it will use the wrapped RF -->
    <bean id="wrapper.resource.factory" class="com.ettrema.json.JsonResourceFactory">
        <constructor-arg ref="main.spliffy.resource.factory"/>
        <constructor-arg ref="milton.property.sources"/>
        <constructor-arg ref="milton.prop.patcher"/>
        <constructor-arg ref="permissions.authoriser"/>
        <constructor-arg ref="event.manager"/>
    </bean>
    
    <bean id="sync.spliffy.resource.factory" class="org.spliffy.server.web.sync.SpliffySyncResourceFactory">
        <constructor-arg ref="hash.store" />
        <constructor-arg ref="blob.store" />
        <constructor-arg ref="security.manager" />
    </bean>

    <bean id="wellknown.resource.factory" class="com.bradmcevoy.http.WellKnownResourceFactory">
        <constructor-arg ref="main.spliffy.resource.factory"/>
        <constructor-arg>
            <list>
                <ref local="protocol.caldav"/>
                <ref local="protocol.carddav"/>
            </list>
        </constructor-arg>
    </bean>
    
    <bean id="resource.factory" class="com.bradmcevoy.http.MultipleResourceFactory">
        <constructor-arg>
            <list>
                <ref local="sync.spliffy.resource.factory" />
                <ref local="wrapper.resource.factory" />                
                <ref local="wellknown.resource.factory" />                
            </list>
        </constructor-arg>
    </bean>

    <bean id="open.session.in.view.filter" class="org.spliffy.server.db.utils.MiltonOpenSessionInViewFilter">
        <constructor-arg ref="session.manager"/>
    </bean>

    <bean id="milton.http.manager" class="com.bradmcevoy.http.HttpManager">        
        <constructor-arg ref="resource.factory" />        
        <constructor-arg ref="milton.response.handler.compressing" />
        <constructor-arg ref="protocol.handlers"/>
        <property name="propertyPermissionService" ref="permissions.authoriser"/>
        <property name="eventManager" ref="event.manager"/>        
        
        <property name="filters">
            <list>
                <ref local="open.session.in.view.filter" />
            </list>
        </property>
        <property name="buffering" value="never" />
    </bean>

    <!--
    <bean id="ftp.security.manager" class="com.ettrema.ftp.WrappingFtpSecurityManager">
        <constructor-arg ref="security.manager"/>
    </bean>
    -->

    <!-- Adapts the specified milton security manager to the FTP server -->
    <!--
    <bean id="ftp.user.manager" class="com.ettrema.ftp.UserManagerAdapter">
        <constructor-arg ref="resource.factory"/>
        <constructor-arg ref="ftp.security.manager"/>
    </bean>
    -->

    <!-- This server will provide access to the same resources available on webdav
    via FTP -->
    <!--
    <bean id="ftp.server" class="com.ettrema.ftp.MiltonFtpAdapter">
        <constructor-arg ref="resource.factory"/>
        <constructor-arg ref="ftp.user.manager"/>
    </bean>
    -->
      
</beans>